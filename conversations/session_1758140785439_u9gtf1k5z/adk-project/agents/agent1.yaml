# knowledge/recipe_kb.yaml
    spec_version: v1
    kind: knowledge_base
    name: recipe_knowledge_base
    description: >
      Contains detailed information and instructions for all official company recipes, including ingredient lists, preparation steps, and cooking tips.
    documents:
      - "mock_data/Classic_Marinara_Sauce.pdf"
      - "mock_data/Perfect_Pizza_Dough.pdf"
    vector_index:
      embeddings_model_name: ibm/slate-125m-english-rtrvr-v2
    ```

2.  **Policy & Procedures Knowledge Base**: This will contain all operational documents.
    *   **File**: `knowledge/policy_kb.yaml`
    *   **Explanation**: Similarly, this file defines the `policy_knowledge_base`. It ingests the policy, conduct, and procedure documents. By separating knowledge bases, we create specialized information sources, which improves the accuracy and relevance of answers from our expert agents.

    ```yaml
    # knowledge/policy_kb.yaml
    spec_version: v1
    kind: knowledge_base
    name: policy_knowledge_base
    description: >
      An authoritative source for all company policies and standard operating procedures (SOPs), including food safety, HR guidelines, and daily checklists.
    documents:
      - "mock_data/Food_Safety_Handling_Policy.docx"
      - "mock_data/Employee_Code_of_Conduct.txt"
      - "mock_data/End_of_Day_Closing_Procedures.html"
    vector_index:
      embeddings_model_name: ibm/slate-125m-english-rtrvr-v2
    ```

## Step 3: Develop the Custom Python Tool

To demonstrate extensibility, we will create a simple Python tool for the `Recipe_Expert_Agent`.

*   **File**: `tools/recipe_tools.py`
*   **Business Value**: The `unit_converter_tool` provides immediate utility in a culinary setting, allowing partners to quickly convert measurements without leaving the chat interface. This showcases how Orchestrate can be extended with custom logic to solve domain-specific problems, enhancing user efficiency.
*   **Technical Implementation**: This tool is created using the `@tool` decorator from the ADK. The function signature defines the inputs (`quantity`, `from_unit`, `to_unit`), and the Google-style docstring provides a detailed description that the agent uses to understand the tool's purpose and arguments. For this demo, the conversion logic is mocked, but it can be easily replaced with a real conversion library.